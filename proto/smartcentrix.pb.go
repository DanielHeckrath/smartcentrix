// Code generated by protoc-gen-go.
// source: proto/smartcentrix.proto
// DO NOT EDIT!

/*
Package smartcentrix is a generated protocol buffer package.

It is generated from these files:
	proto/smartcentrix.proto

It has these top-level messages:
	User
	Device
	Room
	Sensor
	Measurement
	RegisterUserRequest
	RegisterUserResponse
	RegisterSensorRequest
	RegisterSensorResponse
	ListSensorRequest
	ListSensorResponse
	ShowSensorRequest
	ShowSensorResponse
	DeleteSensorRequest
	DeleteSensorResponse
	ListSensorMeasurementRequest
	ListSensorMeasurementResponse
	UpdateSensorMeasurementRequest
	UpdateSensorMeasurementResponse
*/
package smartcentrix

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Device_Type int32

const (
	Device_UNKNOWN Device_Type = 0
	Device_IOS     Device_Type = 1
	Device_ANDROID Device_Type = 2
)

var Device_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "IOS",
	2: "ANDROID",
}
var Device_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"IOS":     1,
	"ANDROID": 2,
}

func (x Device_Type) String() string {
	return proto.EnumName(Device_Type_name, int32(x))
}
func (Device_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type User struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Device struct {
	Id        string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type      Device_Type `protobuf:"varint,2,opt,name=type,enum=Device_Type" json:"type,omitempty"`
	PushToken string      `protobuf:"bytes,3,opt,name=push_token,json=pushToken" json:"push_token,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetType() Device_Type {
	if m != nil {
		return m.Type
	}
	return Device_UNKNOWN
}

func (m *Device) GetPushToken() string {
	if m != nil {
		return m.PushToken
	}
	return ""
}

type Room struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Room) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Sensor struct {
	Id              string                        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name            string                        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	LastMeasurement int64                         `protobuf:"varint,3,opt,name=last_measurement,json=lastMeasurement" json:"last_measurement,omitempty"`
	Status          bool                          `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	RoomId          *google_protobuf1.StringValue `protobuf:"bytes,5,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
}

func (m *Sensor) Reset()                    { *m = Sensor{} }
func (m *Sensor) String() string            { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()               {}
func (*Sensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Sensor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Sensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sensor) GetLastMeasurement() int64 {
	if m != nil {
		return m.LastMeasurement
	}
	return 0
}

func (m *Sensor) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Sensor) GetRoomId() *google_protobuf1.StringValue {
	if m != nil {
		return m.RoomId
	}
	return nil
}

type Measurement struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     int64  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *Measurement) Reset()                    { *m = Measurement{} }
func (m *Measurement) String() string            { return proto.CompactTextString(m) }
func (*Measurement) ProtoMessage()               {}
func (*Measurement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Measurement) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Measurement) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Measurement) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RegisterUserRequest struct {
}

func (m *RegisterUserRequest) Reset()                    { *m = RegisterUserRequest{} }
func (m *RegisterUserRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserRequest) ProtoMessage()               {}
func (*RegisterUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RegisterUserResponse struct {
}

func (m *RegisterUserResponse) Reset()                    { *m = RegisterUserResponse{} }
func (m *RegisterUserResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserResponse) ProtoMessage()               {}
func (*RegisterUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RegisterSensorRequest struct {
	UserId   string                        `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SensorId string                        `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
	Name     *google_protobuf1.StringValue `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	RoomId   *google_protobuf1.StringValue `protobuf:"bytes,4,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
}

func (m *RegisterSensorRequest) Reset()                    { *m = RegisterSensorRequest{} }
func (m *RegisterSensorRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterSensorRequest) ProtoMessage()               {}
func (*RegisterSensorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RegisterSensorRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RegisterSensorRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

func (m *RegisterSensorRequest) GetName() *google_protobuf1.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RegisterSensorRequest) GetRoomId() *google_protobuf1.StringValue {
	if m != nil {
		return m.RoomId
	}
	return nil
}

type RegisterSensorResponse struct {
}

func (m *RegisterSensorResponse) Reset()                    { *m = RegisterSensorResponse{} }
func (m *RegisterSensorResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterSensorResponse) ProtoMessage()               {}
func (*RegisterSensorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ListSensorRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ListSensorRequest) Reset()                    { *m = ListSensorRequest{} }
func (m *ListSensorRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSensorRequest) ProtoMessage()               {}
func (*ListSensorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListSensorRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ListSensorResponse struct {
	Sensors []*Sensor `protobuf:"bytes,1,rep,name=sensors" json:"sensors,omitempty"`
	Rooms   []*Room   `protobuf:"bytes,2,rep,name=rooms" json:"rooms,omitempty"`
}

func (m *ListSensorResponse) Reset()                    { *m = ListSensorResponse{} }
func (m *ListSensorResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSensorResponse) ProtoMessage()               {}
func (*ListSensorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListSensorResponse) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

func (m *ListSensorResponse) GetRooms() []*Room {
	if m != nil {
		return m.Rooms
	}
	return nil
}

type ShowSensorRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SensorId string `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
}

func (m *ShowSensorRequest) Reset()                    { *m = ShowSensorRequest{} }
func (m *ShowSensorRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowSensorRequest) ProtoMessage()               {}
func (*ShowSensorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ShowSensorRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ShowSensorRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

type ShowSensorResponse struct {
	Sensor       *Sensor        `protobuf:"bytes,1,opt,name=sensor" json:"sensor,omitempty"`
	Measurements []*Measurement `protobuf:"bytes,2,rep,name=measurements" json:"measurements,omitempty"`
}

func (m *ShowSensorResponse) Reset()                    { *m = ShowSensorResponse{} }
func (m *ShowSensorResponse) String() string            { return proto.CompactTextString(m) }
func (*ShowSensorResponse) ProtoMessage()               {}
func (*ShowSensorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ShowSensorResponse) GetSensor() *Sensor {
	if m != nil {
		return m.Sensor
	}
	return nil
}

func (m *ShowSensorResponse) GetMeasurements() []*Measurement {
	if m != nil {
		return m.Measurements
	}
	return nil
}

type DeleteSensorRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SensorId string `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
}

func (m *DeleteSensorRequest) Reset()                    { *m = DeleteSensorRequest{} }
func (m *DeleteSensorRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSensorRequest) ProtoMessage()               {}
func (*DeleteSensorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteSensorRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DeleteSensorRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

type DeleteSensorResponse struct {
	Sensor       *Sensor        `protobuf:"bytes,1,opt,name=sensor" json:"sensor,omitempty"`
	Measurements []*Measurement `protobuf:"bytes,2,rep,name=measurements" json:"measurements,omitempty"`
}

func (m *DeleteSensorResponse) Reset()                    { *m = DeleteSensorResponse{} }
func (m *DeleteSensorResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteSensorResponse) ProtoMessage()               {}
func (*DeleteSensorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteSensorResponse) GetSensor() *Sensor {
	if m != nil {
		return m.Sensor
	}
	return nil
}

func (m *DeleteSensorResponse) GetMeasurements() []*Measurement {
	if m != nil {
		return m.Measurements
	}
	return nil
}

type ListSensorMeasurementRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SensorId string `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
}

func (m *ListSensorMeasurementRequest) Reset()                    { *m = ListSensorMeasurementRequest{} }
func (m *ListSensorMeasurementRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSensorMeasurementRequest) ProtoMessage()               {}
func (*ListSensorMeasurementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListSensorMeasurementRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListSensorMeasurementRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

type ListSensorMeasurementResponse struct {
	Measurements []*Measurement `protobuf:"bytes,1,rep,name=measurements" json:"measurements,omitempty"`
}

func (m *ListSensorMeasurementResponse) Reset()                    { *m = ListSensorMeasurementResponse{} }
func (m *ListSensorMeasurementResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSensorMeasurementResponse) ProtoMessage()               {}
func (*ListSensorMeasurementResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ListSensorMeasurementResponse) GetMeasurements() []*Measurement {
	if m != nil {
		return m.Measurements
	}
	return nil
}

type UpdateSensorMeasurementRequest struct {
	UserId       string         `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SensorId     string         `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
	Measurements []*Measurement `protobuf:"bytes,3,rep,name=measurements" json:"measurements,omitempty"`
}

func (m *UpdateSensorMeasurementRequest) Reset()                    { *m = UpdateSensorMeasurementRequest{} }
func (m *UpdateSensorMeasurementRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSensorMeasurementRequest) ProtoMessage()               {}
func (*UpdateSensorMeasurementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateSensorMeasurementRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateSensorMeasurementRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

func (m *UpdateSensorMeasurementRequest) GetMeasurements() []*Measurement {
	if m != nil {
		return m.Measurements
	}
	return nil
}

type UpdateSensorMeasurementResponse struct {
}

func (m *UpdateSensorMeasurementResponse) Reset()         { *m = UpdateSensorMeasurementResponse{} }
func (m *UpdateSensorMeasurementResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSensorMeasurementResponse) ProtoMessage()    {}
func (*UpdateSensorMeasurementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*Device)(nil), "Device")
	proto.RegisterType((*Room)(nil), "Room")
	proto.RegisterType((*Sensor)(nil), "Sensor")
	proto.RegisterType((*Measurement)(nil), "Measurement")
	proto.RegisterType((*RegisterUserRequest)(nil), "RegisterUserRequest")
	proto.RegisterType((*RegisterUserResponse)(nil), "RegisterUserResponse")
	proto.RegisterType((*RegisterSensorRequest)(nil), "RegisterSensorRequest")
	proto.RegisterType((*RegisterSensorResponse)(nil), "RegisterSensorResponse")
	proto.RegisterType((*ListSensorRequest)(nil), "ListSensorRequest")
	proto.RegisterType((*ListSensorResponse)(nil), "ListSensorResponse")
	proto.RegisterType((*ShowSensorRequest)(nil), "ShowSensorRequest")
	proto.RegisterType((*ShowSensorResponse)(nil), "ShowSensorResponse")
	proto.RegisterType((*DeleteSensorRequest)(nil), "DeleteSensorRequest")
	proto.RegisterType((*DeleteSensorResponse)(nil), "DeleteSensorResponse")
	proto.RegisterType((*ListSensorMeasurementRequest)(nil), "ListSensorMeasurementRequest")
	proto.RegisterType((*ListSensorMeasurementResponse)(nil), "ListSensorMeasurementResponse")
	proto.RegisterType((*UpdateSensorMeasurementRequest)(nil), "UpdateSensorMeasurementRequest")
	proto.RegisterType((*UpdateSensorMeasurementResponse)(nil), "UpdateSensorMeasurementResponse")
	proto.RegisterEnum("Device_Type", Device_Type_name, Device_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SensorApiService service

type SensorApiServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	RegisterSensor(ctx context.Context, in *RegisterSensorRequest, opts ...grpc.CallOption) (*RegisterSensorResponse, error)
	ListSensor(ctx context.Context, in *ListSensorRequest, opts ...grpc.CallOption) (*ListSensorResponse, error)
	ShowSensor(ctx context.Context, in *ShowSensorRequest, opts ...grpc.CallOption) (*ShowSensorResponse, error)
	DeleteSensor(ctx context.Context, in *DeleteSensorRequest, opts ...grpc.CallOption) (*DeleteSensorResponse, error)
	ListSensorMeasurement(ctx context.Context, in *ListSensorMeasurementRequest, opts ...grpc.CallOption) (*ListSensorMeasurementResponse, error)
	UpdateSensorMeasurement(ctx context.Context, in *UpdateSensorMeasurementRequest, opts ...grpc.CallOption) (*UpdateSensorMeasurementResponse, error)
}

type sensorApiServiceClient struct {
	cc *grpc.ClientConn
}

func NewSensorApiServiceClient(cc *grpc.ClientConn) SensorApiServiceClient {
	return &sensorApiServiceClient{cc}
}

func (c *sensorApiServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := grpc.Invoke(ctx, "/SensorApiService/RegisterUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorApiServiceClient) RegisterSensor(ctx context.Context, in *RegisterSensorRequest, opts ...grpc.CallOption) (*RegisterSensorResponse, error) {
	out := new(RegisterSensorResponse)
	err := grpc.Invoke(ctx, "/SensorApiService/RegisterSensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorApiServiceClient) ListSensor(ctx context.Context, in *ListSensorRequest, opts ...grpc.CallOption) (*ListSensorResponse, error) {
	out := new(ListSensorResponse)
	err := grpc.Invoke(ctx, "/SensorApiService/ListSensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorApiServiceClient) ShowSensor(ctx context.Context, in *ShowSensorRequest, opts ...grpc.CallOption) (*ShowSensorResponse, error) {
	out := new(ShowSensorResponse)
	err := grpc.Invoke(ctx, "/SensorApiService/ShowSensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorApiServiceClient) DeleteSensor(ctx context.Context, in *DeleteSensorRequest, opts ...grpc.CallOption) (*DeleteSensorResponse, error) {
	out := new(DeleteSensorResponse)
	err := grpc.Invoke(ctx, "/SensorApiService/DeleteSensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorApiServiceClient) ListSensorMeasurement(ctx context.Context, in *ListSensorMeasurementRequest, opts ...grpc.CallOption) (*ListSensorMeasurementResponse, error) {
	out := new(ListSensorMeasurementResponse)
	err := grpc.Invoke(ctx, "/SensorApiService/ListSensorMeasurement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorApiServiceClient) UpdateSensorMeasurement(ctx context.Context, in *UpdateSensorMeasurementRequest, opts ...grpc.CallOption) (*UpdateSensorMeasurementResponse, error) {
	out := new(UpdateSensorMeasurementResponse)
	err := grpc.Invoke(ctx, "/SensorApiService/UpdateSensorMeasurement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SensorApiService service

type SensorApiServiceServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	RegisterSensor(context.Context, *RegisterSensorRequest) (*RegisterSensorResponse, error)
	ListSensor(context.Context, *ListSensorRequest) (*ListSensorResponse, error)
	ShowSensor(context.Context, *ShowSensorRequest) (*ShowSensorResponse, error)
	DeleteSensor(context.Context, *DeleteSensorRequest) (*DeleteSensorResponse, error)
	ListSensorMeasurement(context.Context, *ListSensorMeasurementRequest) (*ListSensorMeasurementResponse, error)
	UpdateSensorMeasurement(context.Context, *UpdateSensorMeasurementRequest) (*UpdateSensorMeasurementResponse, error)
}

func RegisterSensorApiServiceServer(s *grpc.Server, srv SensorApiServiceServer) {
	s.RegisterService(&_SensorApiService_serviceDesc, srv)
}

func _SensorApiService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorApiServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SensorApiService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorApiServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorApiService_RegisterSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorApiServiceServer).RegisterSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SensorApiService/RegisterSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorApiServiceServer).RegisterSensor(ctx, req.(*RegisterSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorApiService_ListSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorApiServiceServer).ListSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SensorApiService/ListSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorApiServiceServer).ListSensor(ctx, req.(*ListSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorApiService_ShowSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorApiServiceServer).ShowSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SensorApiService/ShowSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorApiServiceServer).ShowSensor(ctx, req.(*ShowSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorApiService_DeleteSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorApiServiceServer).DeleteSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SensorApiService/DeleteSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorApiServiceServer).DeleteSensor(ctx, req.(*DeleteSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorApiService_ListSensorMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSensorMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorApiServiceServer).ListSensorMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SensorApiService/ListSensorMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorApiServiceServer).ListSensorMeasurement(ctx, req.(*ListSensorMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorApiService_UpdateSensorMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensorMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorApiServiceServer).UpdateSensorMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SensorApiService/UpdateSensorMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorApiServiceServer).UpdateSensorMeasurement(ctx, req.(*UpdateSensorMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SensorApiService",
	HandlerType: (*SensorApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _SensorApiService_RegisterUser_Handler,
		},
		{
			MethodName: "RegisterSensor",
			Handler:    _SensorApiService_RegisterSensor_Handler,
		},
		{
			MethodName: "ListSensor",
			Handler:    _SensorApiService_ListSensor_Handler,
		},
		{
			MethodName: "ShowSensor",
			Handler:    _SensorApiService_ShowSensor_Handler,
		},
		{
			MethodName: "DeleteSensor",
			Handler:    _SensorApiService_DeleteSensor_Handler,
		},
		{
			MethodName: "ListSensorMeasurement",
			Handler:    _SensorApiService_ListSensorMeasurement_Handler,
		},
		{
			MethodName: "UpdateSensorMeasurement",
			Handler:    _SensorApiService_UpdateSensorMeasurement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/smartcentrix.proto",
}

func init() { proto.RegisterFile("proto/smartcentrix.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x95, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xc7, 0x19, 0x7f, 0x8c, 0xe3, 0xb2, 0x15, 0x9c, 0xf2, 0x47, 0x86, 0x89, 0x93, 0x38, 0x2d,
	0x21, 0xbc, 0x16, 0xf4, 0xec, 0x7a, 0x05, 0x12, 0x2b, 0x2e, 0x2b, 0x59, 0x48, 0xd6, 0x82, 0xa3,
	0x1d, 0x3b, 0x7c, 0x9c, 0xac, 0xd9, 0x9d, 0xc6, 0x3b, 0xe0, 0xf9, 0x60, 0xba, 0x9d, 0xb0, 0x5a,
	0xed, 0x05, 0x71, 0xe0, 0x8a, 0xb8, 0xf1, 0x00, 0x3c, 0x02, 0x27, 0xde, 0x82, 0x57, 0xe0, 0x41,
	0xd0, 0xf4, 0x8c, 0xed, 0x71, 0x6c, 0x27, 0x5e, 0x91, 0xbd, 0xb9, 0xff, 0x55, 0xae, 0xfa, 0x55,
	0x75, 0x57, 0x0d, 0x68, 0x41, 0xe8, 0x0b, 0xdf, 0xe0, 0xae, 0x15, 0x8a, 0xe7, 0xcc, 0x13, 0xa1,
	0xf3, 0x13, 0x95, 0x92, 0xde, 0x9c, 0xf8, 0xfe, 0x64, 0xca, 0x0c, 0x2b, 0x70, 0x0c, 0xcb, 0xf3,
	0x7c, 0x61, 0x09, 0xc7, 0xf7, 0x78, 0x62, 0x3d, 0x49, 0xac, 0xf2, 0xf4, 0x6c, 0xf6, 0x9d, 0x71,
	0x15, 0x5a, 0x41, 0xc0, 0xc2, 0xc4, 0x4e, 0x3e, 0x87, 0xdc, 0x05, 0x67, 0x21, 0xee, 0x43, 0xc6,
	0xb1, 0x35, 0xa5, 0xa5, 0xb4, 0x8b, 0x66, 0xc6, 0xb1, 0x11, 0x21, 0xe7, 0x59, 0x2e, 0xd3, 0x32,
	0x52, 0x91, 0xbf, 0x51, 0x87, 0xbd, 0xc0, 0xe2, 0xfc, 0xca, 0x0f, 0x6d, 0x2d, 0x2b, 0xf5, 0xc5,
	0x99, 0xfc, 0xa2, 0x80, 0xda, 0x63, 0x97, 0xce, 0x73, 0xb6, 0x16, 0xaa, 0x05, 0x39, 0xf1, 0x32,
	0x88, 0x43, 0xed, 0x77, 0xcb, 0x34, 0x76, 0xa3, 0xa3, 0x97, 0x01, 0x33, 0xa5, 0x05, 0x8f, 0x01,
	0x82, 0x19, 0x7f, 0x31, 0x16, 0xfe, 0x0f, 0xcc, 0x4b, 0x42, 0x17, 0x23, 0x65, 0x14, 0x09, 0xe4,
	0x1e, 0xe4, 0x22, 0x67, 0x2c, 0x41, 0xe1, 0x62, 0xf0, 0x64, 0x70, 0xfe, 0xf5, 0xa0, 0xf2, 0x0e,
	0x16, 0x20, 0xdb, 0x3f, 0x1f, 0x56, 0x94, 0x48, 0x7d, 0x3c, 0xe8, 0x99, 0xe7, 0xfd, 0x5e, 0x25,
	0x43, 0x3a, 0x90, 0x33, 0x7d, 0xdf, 0xdd, 0xa5, 0x1c, 0xf2, 0xa7, 0x02, 0xea, 0x90, 0x79, 0xdc,
	0xdf, 0xad, 0xfa, 0x7b, 0x50, 0x99, 0x5a, 0x5c, 0x8c, 0x5d, 0x66, 0xf1, 0x59, 0xc8, 0x5c, 0xe6,
	0x09, 0x89, 0x9a, 0x35, 0xdf, 0x8d, 0xf4, 0x2f, 0x97, 0x32, 0x36, 0x40, 0xe5, 0xc2, 0x12, 0x33,
	0xae, 0xe5, 0x5a, 0x4a, 0x7b, 0xcf, 0x4c, 0x4e, 0xf8, 0x31, 0x14, 0x42, 0xdf, 0x77, 0xc7, 0x8e,
	0xad, 0xe5, 0x5b, 0x4a, 0xbb, 0xd4, 0x6d, 0xd2, 0xf8, 0x7a, 0xe8, 0xfc, 0x7a, 0xe8, 0x50, 0x84,
	0x8e, 0x37, 0xf9, 0xca, 0x9a, 0xce, 0x98, 0xa9, 0x46, 0xce, 0x7d, 0x9b, 0x3c, 0x85, 0x52, 0x3a,
	0xfa, 0x75, 0xd8, 0x26, 0x14, 0x85, 0xe3, 0x32, 0x2e, 0x2c, 0x37, 0x90, 0xc4, 0x59, 0x73, 0x29,
	0x60, 0x0d, 0xf2, 0x97, 0x51, 0xb4, 0x84, 0x35, 0x3e, 0x90, 0x3a, 0x54, 0x4d, 0x36, 0x71, 0xb8,
	0x60, 0x61, 0x74, 0xfd, 0x26, 0xfb, 0x71, 0xc6, 0xb8, 0x20, 0x0d, 0xa8, 0xad, 0xca, 0x3c, 0xf0,
	0x3d, 0xce, 0xc8, 0x5f, 0x0a, 0xd4, 0xe7, 0x86, 0xb8, 0x65, 0xc9, 0x3f, 0xf0, 0x10, 0x0a, 0x33,
	0xce, 0xc2, 0xf1, 0x82, 0x48, 0x8d, 0x8e, 0x7d, 0x1b, 0x8f, 0xa0, 0xc8, 0xa5, 0x67, 0x64, 0x8a,
	0xfb, 0xb8, 0x17, 0x0b, 0x7d, 0x1b, 0xef, 0x27, 0xfd, 0xcd, 0xee, 0xd0, 0x85, 0xb8, 0xfb, 0xa9,
	0xd6, 0xe5, 0xde, 0xa0, 0x75, 0x1a, 0x34, 0xae, 0x73, 0x27, 0x25, 0x7d, 0x08, 0x07, 0x5f, 0x38,
	0x5c, 0xec, 0x56, 0x0d, 0x19, 0x01, 0xa6, 0xbd, 0xe3, 0x18, 0x78, 0x06, 0x85, 0xb8, 0x24, 0xae,
	0x29, 0xad, 0x6c, 0xbb, 0xd4, 0x2d, 0xd0, 0xc4, 0x63, 0xae, 0xe3, 0x11, 0xe4, 0x23, 0x14, 0xae,
	0x65, 0xa4, 0x43, 0x9e, 0x46, 0xcf, 0xd3, 0x8c, 0x35, 0xd2, 0x87, 0x83, 0xe1, 0x0b, 0xff, 0xea,
	0x0e, 0x3a, 0x4a, 0x26, 0x80, 0xe9, 0x50, 0x09, 0xe0, 0x29, 0xa8, 0xb1, 0x87, 0x0c, 0x95, 0xe2,
	0x4b, 0x64, 0xbc, 0x0f, 0xe5, 0xd4, 0x7b, 0x9e, 0x53, 0x96, 0x69, 0xea, 0xbd, 0x99, 0x2b, 0x1e,
	0xe4, 0x09, 0x54, 0x7b, 0x6c, 0xca, 0x04, 0xbb, 0x0b, 0x6a, 0x07, 0x6a, 0xab, 0xc1, 0xde, 0x1e,
	0xf7, 0x08, 0x9a, 0xcb, 0x1b, 0x4c, 0xbb, 0xfd, 0xaf, 0x02, 0x9e, 0xc2, 0xf1, 0x96, 0xa8, 0x49,
	0x25, 0xd7, 0x41, 0x95, 0x5b, 0x41, 0x7f, 0x55, 0xe0, 0xe4, 0x22, 0xb0, 0xad, 0x79, 0x53, 0xee,
	0x8a, 0x75, 0x0d, 0x25, 0x7b, 0x2b, 0xca, 0x19, 0x9c, 0x6e, 0x25, 0x89, 0xeb, 0xeb, 0xfe, 0xad,
	0x42, 0x25, 0xb6, 0x3e, 0x0e, 0x9c, 0x21, 0x0b, 0xe5, 0x17, 0xe0, 0x5b, 0x28, 0xa7, 0xd7, 0x08,
	0xd6, 0xe8, 0x86, 0x65, 0xa3, 0xd7, 0xe9, 0xc6, 0x5d, 0xd3, 0xfc, 0xf9, 0x9f, 0x7f, 0x7f, 0xcf,
	0x34, 0xc8, 0x81, 0x71, 0xf9, 0xc0, 0x88, 0xea, 0x32, 0xc2, 0xc4, 0xed, 0x91, 0xd2, 0xc1, 0x00,
	0xf6, 0x57, 0x07, 0x1a, 0x1b, 0x74, 0xe3, 0x66, 0xd2, 0x0f, 0xe9, 0x96, 0xc9, 0xff, 0x48, 0x26,
	0xf8, 0x80, 0x90, 0x45, 0x82, 0x57, 0x49, 0x37, 0x5f, 0x1b, 0x71, 0xb3, 0x56, 0x32, 0x7e, 0x03,
	0xb0, 0xbc, 0x62, 0x44, 0xba, 0xb6, 0x35, 0xf4, 0x2a, 0x5d, 0xdf, 0x0d, 0xe4, 0x4c, 0x66, 0x39,
	0xc2, 0xf7, 0xb6, 0x66, 0x41, 0x1b, 0x60, 0x39, 0xb3, 0x88, 0x74, 0x6d, 0x17, 0xe8, 0x55, 0xba,
	0x3e, 0xd4, 0x73, 0x7e, 0x7c, 0x7f, 0x3b, 0xff, 0xab, 0xc5, 0x2b, 0x78, 0x8d, 0xdf, 0x43, 0x39,
	0x3d, 0x63, 0x58, 0xa3, 0x1b, 0xe6, 0x57, 0xaf, 0xd3, 0x4d, 0x83, 0x38, 0xcf, 0xd5, 0xd9, 0x31,
	0xd7, 0x6f, 0x0a, 0xd4, 0x37, 0xce, 0x03, 0x1e, 0xd3, 0x9b, 0xa6, 0x4f, 0x3f, 0xa1, 0x37, 0x8e,
	0x11, 0xf9, 0x54, 0x72, 0x3c, 0xc4, 0x07, 0x3b, 0x71, 0x18, 0xa9, 0x57, 0x8c, 0x7f, 0x28, 0x70,
	0xb8, 0xe5, 0x15, 0xe3, 0x29, 0xbd, 0x79, 0xd2, 0xf4, 0x16, 0xbd, 0x65, 0x00, 0xc8, 0x67, 0x92,
	0xec, 0x13, 0xf2, 0xe6, 0x64, 0x8f, 0x94, 0xce, 0x33, 0x55, 0x7e, 0xbd, 0x1e, 0xfe, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x9d, 0x44, 0x04, 0xd2, 0xdf, 0x09, 0x00, 0x00,
}
